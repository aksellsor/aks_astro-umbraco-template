---
const { path } = Astro.props;
import BackBtn from "./BackBtn"
---

   <!--

    client:load
    Priority: High
    Useful for: Immediately-visible UI elements that need to be interactive as soon as possible.

    client:idle
    Priority: Medium
    Useful for: Lower-priority UI elements that don’t need to be immediately interactive.

    client:visible
    Priority: Low
    Useful for: Low-priority UI elements that are either far down the page (“below the fold”) or so resource-intensive to load that you would prefer not to load them at all if the user never saw the element.

    client:visible={{rootMargin: "200px"}}
    Optionally, a value for rootMargin can be passed to the underlying IntersectionObserver. When rootMargin is specified, the component JavaScript will hydrate when a specified margin (in pixels) around the component enters the viewport, rather than the component itself.

     -->
{path !== "/" &&
<>
    React rendered button:<br/>
    <BackBtn client:load/>
    <hr/>
    <div class="crumbs">{path?.split("/").slice(0,-1)?.map(p => <a href={`/${p}`}>{p ==="" ? <svg stroke="currentColor" width="1em" height="1em" fill="currentColor" strokeWidth="0" viewBox="0 0 20 20" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>: p.replace(/-/g," ")}</a>)}</div>
</>
}

<style>
    hr {
        border-color: rgba(150,150,150,0.3);
    }
    .crumbs {
        display: flex;
        flex-wrap: wrap;
        gap: .25rem;
    }
    .crumbs a::first-letter {text-transform: capitalize;}
    .crumbs a {
        padding: .5em;
        background-color: rgba(255,255,255,0.1);
        text-decoration-color: rgba(255,255,255,0.3);
    }
    .crumbs a:hover {
        display: inline-block;
        text-decoration-color: rgba(255,255,255,1);
    }
</style>