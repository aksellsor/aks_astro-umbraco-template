---
import Layout from "../layouts/Layout.astro";
import client from '../umbraco-client';
import Page from '../layouts/Page.astro';
import Root from '../layouts/Root.astro';
import { getUmbracoImage } from "../utils";

const SSR = import.meta.env.RENDER_MODE === "SSR";
let UMBRACO_ROOT_NODE =  import.meta.env.UMBRACO_ROOT_NODE;

// export async function getStaticPaths() {
// 	let PUBLIC_DEFAULT_LOCALE = import.meta.env.PUBLIC_DEFAULT_LOCALE;
// 	let PUBLIC_LOCALES = import.meta.env.PUBLIC_LOCALES?.split(',');
// 	let languages = PUBLIC_LOCALES?.map((lang) =>
// 		lang === PUBLIC_DEFAULT_LOCALE ? '' : lang
// 	);
		
// 	async function getContentByLocale(locale) {
// 		const pages = await client.getContentByType(
// 		`page`,
// 		{
// 			sort: { type: 'createDate', order: 'asc' },
// 		},
// 		locale
// 		);

// 		const root = await client.getContentByType(
// 		`root`,
// 		{
// 			sort: { type: 'createDate', order: 'asc' },
// 		},
// 		locale
// 		);

// 		return [...pages, ...root];
// 	}

// 	// Kaller getContentByLocale for hver locale og venter på alle løftene
// 	const allContentPromises = languages?.map((locale) =>
// 		getContentByLocale(locale)
// 	);
// 	const allContent = await Promise.all(allContentPromises);
//   	const pages = allContent.flat();
// 	return [...pages].map((page) => ({
// 		params: { slug: page.route.path.replace(/^\/|\/$/,"") },
// 		props: page
// 	}))
// }

let currentSlug = Astro.params.slug || UMBRACO_ROOT_NODE;
let origin = new URL(Astro.url).origin;
let preview = Astro.url.searchParams.get("preview") === 'true';
let culture = Astro.url.searchParams.get("culture");
const pageData = SSR ? await client.getContentById(origin,currentSlug,preview,culture).then(res => res) : Astro.props;
if (!pageData) {
	return new Response(null, {
		status: 404,
		statusText: 'Not found!',
	});
}
const { contentType, name, route, id, cultures, properties } = pageData || {};
let SEOtitle = properties?.SEOtitle;
let SEOdescription = properties?.SEOdescription;
let SEOimage = getUmbracoImage(properties?.SEOimage,"?width=1200&height=630");
---

<Layout
	{name}
	path={route?.path}
	{id}
	{cultures}
	seo={
		{
			title: SEOtitle | name,
			description: SEOdescription,
			image: SEOimage?.url
			// author
			// copyright
		}
	}
>
	{
		() => {
			switch(contentType) {
				case "page":
					return <Page props={pageData}/>
				default:
					return <Root props={pageData}/>
			}
		}
	}
</Layout>