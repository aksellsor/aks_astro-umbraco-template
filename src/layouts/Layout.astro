
---
	import Hotkeys from "../dev/Hotkeys.jsx"
	import DEV from '../dev/DEV.astro';
	import CMDK from '../dev/CMDK-wrapper.astro';
	import Nav from "../components/Nav.astro"
	import DarkmodeToggle from "../components/DarkmodeToggle.jsx"
	import Footer from "../components/Footer.astro"
	import Cultures from "../components/Cultures.astro";
	import client from '../umbraco-client';
	import { SEOMetadata } from 'astro-seo-metadata';
	import { getUmbracoImage, slugify } from "../utils";
	import { ViewTransitions,fade } from "astro:transitions"

	// Global state
	let UMBRACO_ROOT_NODE =  import.meta.env.UMBRACO_ROOT_NODE;
	let currentSlug = Astro.params.slug || UMBRACO_ROOT_NODE;
	let origin = new URL(Astro.url).origin;
	let preview = Astro.url.searchParams.get("preview") === 'true';
	let culture = Astro.url.searchParams.get("culture");
	const rootData = await client.getRootData(origin,currentSlug,culture).then(res => res);
	const { properties } = rootData || {};

		// SEO
	const SITE = import.meta.env.SITE;
	const { seo = {},name, path, id, cultures } = Astro.props;

	const siteName = properties?.siteName;
	const favicon = getUmbracoImage(properties?.favicon);
	const canonicalUrl = Astro.url.toString();
	const ogImage = `https://fakeimg.pl/1200x630/d5d957/000?font=bebas&font_size=150&image_type=jpg&text=${name || siteName}`
---

<!-- const ogImage = `${new URL(Astro.url).origin}/og/${siteName}.png?description=${slugify(name)}`; -->
<html lang="en">
	<head>
    	<ViewTransitions />
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
  		<link rel="sitemap" href="/sitemap-index.xml" />
		
		  <SEOMetadata
			siteName={siteName}
			title={seo.title || name}
			description={seo.description}
			image={seo.image?.url || ogImage}
			author={seo.author}
			copyright={seo.copyright}
			favicon={favicon?.url}
			astroSitemap={SITE ? true : false}
			canonicalUrl={canonicalUrl}
			type={'website'}
			astroGenerator={true}
		/>
	</head>
	<body transition:animate="none">
		<div transition:animate="fade" style="position:relative;z-index:9999;">
			<Hotkeys client:load currentId={id} />
			<DarkmodeToggle client:only="react" transition:persist/>
			<DEV seo={{ogImage, siteName, title: seo.title || name, description: seo.description, }} />
			<CMDK currentId={id} />
		</div>
		<div class="page container">
			<Nav path={path} navMenu={properties?.navMenu}/>
			<Cultures {cultures}/>

			<main class="content">
				<slot />
			</main>

			<Footer />
		</div>
	</body>
</html>
<script>
    import { darkmode } from '../globalState';
	darkmode.subscribe(dm => {
		document.body.classList.toggle("darkmode", JSON.parse(dm));
	});
	// Persist state on transition
	document.addEventListener("astro:after-swap", () => {
		document.body.classList.toggle("darkmode", localStorage.getItem("darkmode") === "true");
	})
</script>
<script define:vars={{ preview }} is:inline>
	document.addEventListener('beforeunload', (event) => {
		if(preview) {
			event.preventDefault();
			event.returnValue = '';
		}
	});
</script>


<!-- PAGE LAYOUT -->
<style>
	.page{
		display:flex;flex-direction: column;justify-content: space-between;
	}
	.container {
		margin: auto;
		max-width: 1200px;
		width: calc(100% - 2rem);
	}
	footer {
		margin-top: auto;
		padding:1rem 0;
		display: flex;
		align-items: center;
		gap: 3rem;
	}
	.content {
		margin-bottom: auto;
	}

</style>

<!-- GLOBAL -->
<style is:global>
	body.darkmode {color: white;background: #13151a;}
	*,
	*::before,
	*::after,
	html {
		box-sizing: border-box;
	}
	html {
		font-size: 100%;
	}
	a {
		color: inherit;
		text-underline-offset: .3em;
	}
	::selection {
		text-shadow: none;
		color: #fff;
		background-color: #00f;
	}
	body {
		font-family: system-ui, sans-serif;
		text-rendering: geometricPrecision | optimizeLegibility | optimizeSpeed;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}

	a, button {
		touch-action: manipulation; /* Element doesn't want double-tap on mobile to zoom */
	}
	html,body,.page {height:100%;}
</style>