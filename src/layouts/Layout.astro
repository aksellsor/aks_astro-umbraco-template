
---
	import Hotkeys from "../dev/Hotkeys.jsx"
	import DEV from '../dev/DEV.astro';
	import CMDK from '../dev/CMDK-wrapper.astro';
	import Nav from "../components/Nav.astro"
	import DarkmodeToggle from "../components/DarkmodeToggle.jsx"
	import Footer from "../components/Footer.astro"
	import Cultures from "../components/Cultures.astro";
	import client from '../umbraco-client';

	// SEO
	const { name, path, id, cultures } = Astro.props;
	const description = "This is a description placeholder for this website.";
	const ogImage = { url:"https://placehold.co/1200x630" }
	let UMBRACO_ROOT_NODE =  import.meta.env.UMBRACO_ROOT_NODE;

	// Global state
	let currentSlug = Astro.params.slug || UMBRACO_ROOT_NODE;
	let origin = new URL(Astro.url).origin;
	let preview = Astro.url.searchParams.get("preview");
	const pageData = await client.getRootData(origin,currentSlug,preview).then(res => res);
	const { properties } = pageData ||Â {};
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
  		<link rel="sitemap" href="/sitemap-index.xml" />
		<!-- SEO -->
		<title>{name}</title>
		<meta name="description" content={description}>

		<!-- Facebook Meta Tags -->
		<meta property="og:type" content="website">
		<meta property="og:title" content={name}>
		<meta property="og:description" content={description}>
		<meta property="og:image" content={ogImage?.url}>

		<!-- Twitter Meta Tags -->
		<meta name="twitter:card" content="summary_large_image">
		<meta name="twitter:title" content={name}>
		<meta name="twitter:description" content={description}>
		<meta name="twitter:image" content={ogImage?.url}>

	</head>
	<body >
		<DEV/>
		<CMDK currentId={id}/>
		<Hotkeys client:load currentId={id}/>
		<div class="page container">
			<Nav path={path} navMenu={properties?.navMenu}/>
			<Cultures {cultures}/>

			<main class="content">
				<slot />
			</main>

			<DarkmodeToggle client:only/>
			<Footer/>
		</div>

	</body>
</html>
<script define:vars={{ preview }} is:inline>
	window.addEventListener('beforeunload', (event) => {
		if(preview) {
			event.preventDefault();
			event.returnValue = '';
		}
	});
</script>
<script>
    import { darkmode } from '../globalState';
	darkmode.subscribe(dm => {
   		 document.body.classList.toggle("darkmode", JSON.parse(dm));
	});
</script>
<!-- 
<script define:vars={{ properties: properties}} type="module">
	import { atom } from 'nanostores';
	export const globalProps = atom(properties);
</script> -->

<!-- PAGE LAYOUT -->
<style>
	.page{
		display:flex;flex-direction: column;justify-content: space-between;
	}
	.container {
		margin: auto;
		max-width: 1200px;
		width: calc(100% - 2rem);
	}
	footer {
		margin-top: auto;
		padding:1rem 0;
		display: flex;
		align-items: center;
		gap: 3rem;
	}
	.content {
		margin-bottom: auto;
	}

</style>

<!-- GLOBAL -->
<style is:global>
	body.darkmode {color: white;background: #13151a;}
	*,
	*::before,
	*::after,
	html {
		box-sizing: border-box;
	}
	html {
		font-size: 100%;
	}
	a {
		color: inherit;
		text-underline-offset: .3em;
	}
	::selection {
		text-shadow: none;
		color: #fff;
		background-color: #00f;
	}
	body {
		font-family: system-ui, sans-serif;
		text-rendering: geometricPrecision | optimizeLegibility | optimizeSpeed;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}

	a, button {
		touch-action: manipulation; /* Element doesn't want double-tap on mobile to zoom */
	}
	html,body,.page {height:100%;}
</style>