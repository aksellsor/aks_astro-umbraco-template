---
// import { getUmbracoImage } from "../utils";
import Btn from "../components/Btn.jsx";
import {Image} from 'astro:assets'
import { getUmbracoImage } from "../utils";
const {props} = Astro.props;
const img = getUmbracoImage(props?.properties?.pageBg);
// const img = props?.properties?.pageBg[0];

---
<!-- {JSON.stringify(props?.properties?.pageBg[0])} -->
<Image
    src={img?.url}
    alt={img?.name}
    format="webp"
    quality="80"
    width={1280}
    height={720}
    widths={[240,540,720,1280]}
    sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, 1280px`}
    decoding="async"
    loading="lazy"
    style="max-width: 100%; aspect-ratio: 1280 / 720; height: auto;"
/>
<h1>

    {props.name}
</h1>
<!-- <img src={getUmbracoImage(props.properties.pageBg)} class="img"/> -->


<!--
    client:load
    Priority: High
    Useful for: Immediately-visible UI elements that need to be interactive as soon as possible.

    client:idle
    Priority: Medium
    Useful for: Lower-priority UI elements that don’t need to be immediately interactive.

    client:visible
    Priority: Low
    Useful for: Low-priority UI elements that are either far down the page (“below the fold”) or so resource-intensive to load that you would prefer not to load them at all if the user never saw the element.

    client:visible={{rootMargin: "200px"}}
    Optionally, a value for rootMargin can be passed to the underlying IntersectionObserver. When rootMargin is specified, the component JavaScript will hydrate when a specified margin (in pixels) around the component enters the viewport, rather than the component itself.

    
-->
React rendered button:
<Btn
client:load



>Increment</Btn>

<style>
    /* .img {
        width:100%
    } */
</style>